{"version":3,"sources":["../../../../src/domain/value/String/Emai.spec.ts"],"sourcesContent":["import { isEmail } from 'class-validator';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { Email } from './Email';\n\ndescribe('Email', () => {\n  it('should return Email when input is valid', () => {\n    fc.assert(\n      fc.property(fc.emailAddress(), (email) => {\n        const value = Email.from(email);\n        expect(value).toBeInstanceOf(Email);\n        expect(value.value).toEqual(email);\n      }),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (email) => {\n        expect(() => Email.from(email)).toThrow('Email must be not empty');\n      }),\n    );\n  });\n  it('should throw an error when input is not a email', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string()\n          .map((val) => val.trim())\n          .filter((val) => val.length > 1 && !isEmail(val)),\n        (email) => {\n          expect(() => Email.from(email)).toThrow('Invalid email');\n        },\n      ),\n    );\n  });\n\n  describe('equals', () => {\n    it('should return true when compare two Email has same value', () => {\n      fc.assert(\n        fc.property(fc.emailAddress(), (email) => {\n          const value1 = Email.from(email);\n          const value2 = Email.from(email);\n          expect(value1).toBeInstanceOf(Email);\n          expect(value2).toBeInstanceOf(Email);\n          expect(value1.value).toEqual(email);\n          expect(value2.value).toEqual(email);\n          expect(value1.equals(value2)).toBe(true);\n        }),\n      );\n    });\n    it('should return true when compare two Email has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              email1: fc.emailAddress(),\n              email2: fc.emailAddress(),\n            })\n            .filter(({ email1, email2 }) => email1 !== email2),\n          ({ email1, email2 }) => {\n            const value1 = Email.from(email1);\n            const value2 = Email.from(email2);\n            expect(value1).toBeInstanceOf(Email);\n            expect(value2).toBeInstanceOf(Email);\n            expect(value1.value).toEqual(email1);\n            expect(value2.value).toEqual(email2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["isEmail","fc","describe","expect","it","Email","assert","property","emailAddress","email","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","string","map","val","trim","filter","length","value1","value2","equals","toBe","record","email1","email2"],"mappings":"AAAA,SAASA,OAAO,QAAQ,kBAAkB;AAC1C,OAAOC,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,KAAK,QAAQ,aAAU;AAEhCH,SAAS,SAAS;IAChBE,GAAG,2CAA2C;QAC5CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGO,YAAY,IAAI,CAACC;YAC9B,MAAMC,QAAQL,MAAMM,IAAI,CAACF;YACzBN,OAAOO,OAAOE,cAAc,CAACP;YAC7BF,OAAOO,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAEJ;IACAL,GAAG,6CAA6C;QAC9CH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGa,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3CN,OAAO,IAAME,MAAMM,IAAI,CAACF,QAAQM,OAAO,CAAC;QAC1C;IAEJ;IACAX,GAAG,mDAAmD;QACpDH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGe,MAAM,GACNC,GAAG,CAAC,CAACC,MAAQA,IAAIC,IAAI,IACrBC,MAAM,CAAC,CAACF,MAAQA,IAAIG,MAAM,GAAG,KAAK,CAACrB,QAAQkB,OAC9C,CAACT;YACCN,OAAO,IAAME,MAAMM,IAAI,CAACF,QAAQM,OAAO,CAAC;QAC1C;IAGN;IAEAb,SAAS,UAAU;QACjBE,GAAG,4DAA4D;YAC7DH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CAACN,GAAGO,YAAY,IAAI,CAACC;gBAC9B,MAAMa,SAASjB,MAAMM,IAAI,CAACF;gBAC1B,MAAMc,SAASlB,MAAMM,IAAI,CAACF;gBAC1BN,OAAOmB,QAAQV,cAAc,CAACP;gBAC9BF,OAAOoB,QAAQX,cAAc,CAACP;gBAC9BF,OAAOmB,OAAOZ,KAAK,EAAEG,OAAO,CAACJ;gBAC7BN,OAAOoB,OAAOb,KAAK,EAAEG,OAAO,CAACJ;gBAC7BN,OAAOmB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAEJ;QACArB,GAAG,kEAAkE;YACnEH,GAAGK,MAAM,CACPL,GAAGM,QAAQ,CACTN,GACGyB,MAAM,CAAC;gBACNC,QAAQ1B,GAAGO,YAAY;gBACvBoB,QAAQ3B,GAAGO,YAAY;YACzB,GACCY,MAAM,CAAC,CAAC,EAAEO,MAAM,EAAEC,MAAM,EAAE,GAAKD,WAAWC,SAC7C,CAAC,EAAED,MAAM,EAAEC,MAAM,EAAE;gBACjB,MAAMN,SAASjB,MAAMM,IAAI,CAACgB;gBAC1B,MAAMJ,SAASlB,MAAMM,IAAI,CAACiB;gBAC1BzB,OAAOmB,QAAQV,cAAc,CAACP;gBAC9BF,OAAOoB,QAAQX,cAAc,CAACP;gBAC9BF,OAAOmB,OAAOZ,KAAK,EAAEG,OAAO,CAACc;gBAC7BxB,OAAOoB,OAAOb,KAAK,EAAEG,OAAO,CAACe;gBAC7BzB,OAAOmB,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}