{"version":3,"sources":["../../../../src/domain/value/String/Uuid.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport * as uuid from 'uuid';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  AuthenticationInformationId,\n  ImageId,\n  PersonnelId,\n  PersonnelUserTypeId,\n} from './Uuid';\n\ndescribe('Uuid', () => {\n  describe('PersonnelId', () => {\n    it('Should return PersonnelId when input is valid', () => {\n      fc.assert(\n        fc.property(fc.uuid({ version: 7 }), (id) => {\n          const result = PersonnelId.from(id);\n          expect(result).toBeInstanceOf(PersonnelId);\n          expect(result.value).toEqual(id);\n        }),\n      );\n    });\n    it('Should throw error when input is invalid', () => {\n      fc.assert(\n        fc.property(\n          fc.uuid().filter((value) => uuid.version(value) !== 7),\n          (id) => {\n            expect(() => PersonnelId.from(id)).toThrow(/Invalid UUID v7/);\n          },\n        ),\n      );\n    });\n    it('Should generate PersonnelId', () => {\n      const result = PersonnelId.make();\n      expect(result).toBeInstanceOf(PersonnelId);\n      expect(uuid.validate(result.value)).toBe(true);\n      expect(uuid.version(result.value)).toEqual(7);\n    });\n  });\n  describe('PersonnelUserTypeId', () => {\n    it('Should return PersonnelUserTypeId when input is valid', () => {\n      fc.assert(\n        fc.property(fc.uuid({ version: 7 }), (id) => {\n          const result = PersonnelUserTypeId.from(id);\n          expect(result).toBeInstanceOf(PersonnelUserTypeId);\n          expect(result.value).toEqual(id);\n        }),\n      );\n    });\n    it('Should throw error when input is invalid', () => {\n      fc.assert(\n        fc.property(\n          fc.uuid().filter((value) => uuid.version(value) !== 7),\n          (id) => {\n            expect(() => PersonnelUserTypeId.from(id)).toThrow(\n              /Invalid UUID v7/,\n            );\n          },\n        ),\n      );\n    });\n    it('Should generate PersonnelUserTypeId', () => {\n      const result = PersonnelUserTypeId.make();\n      expect(result).toBeInstanceOf(PersonnelUserTypeId);\n      expect(uuid.validate(result.value)).toBe(true);\n      expect(uuid.version(result.value)).toEqual(7);\n    });\n  });\n  describe('ImageId', () => {\n    it('Should return ImageId when input is valid', () => {\n      fc.assert(\n        fc.property(fc.uuid({ version: 7 }), (id) => {\n          const result = ImageId.from(id);\n          expect(result).toBeInstanceOf(ImageId);\n          expect(result.value).toEqual(id);\n        }),\n      );\n    });\n    it('Should throw error when input is invalid', () => {\n      fc.assert(\n        fc.property(\n          fc.uuid().filter((value) => uuid.version(value) !== 7),\n          (id) => {\n            expect(() => ImageId.from(id)).toThrow(/Invalid UUID v7/);\n          },\n        ),\n      );\n    });\n    it('Should generate ImageId', () => {\n      const result = ImageId.make();\n      expect(result).toBeInstanceOf(ImageId);\n      expect(uuid.validate(result.value)).toBe(true);\n      expect(uuid.version(result.value)).toEqual(7);\n    });\n  });\n  describe('AuthenticationInformationId', () => {\n    it('Should return AuthenticationInformationId when input is valid', () => {\n      fc.assert(\n        fc.property(fc.uuid({ version: 7 }), (id) => {\n          const result = AuthenticationInformationId.from(id);\n          expect(result).toBeInstanceOf(AuthenticationInformationId);\n          expect(result.value).toEqual(id);\n        }),\n      );\n    });\n    it('Should throw error when input is invalid', () => {\n      fc.assert(\n        fc.property(\n          fc.uuid().filter((value) => uuid.version(value) !== 7),\n          (id) => {\n            expect(() => AuthenticationInformationId.from(id)).toThrow(\n              /Invalid UUID v7/,\n            );\n          },\n        ),\n      );\n    });\n    it('Should generate AuthenticationInformationId', () => {\n      const result = AuthenticationInformationId.make();\n      expect(result).toBeInstanceOf(AuthenticationInformationId);\n      expect(uuid.validate(result.value)).toBe(true);\n      expect(uuid.version(result.value)).toEqual(7);\n    });\n  });\n});\n"],"names":["fc","uuid","describe","expect","it","AuthenticationInformationId","ImageId","PersonnelId","PersonnelUserTypeId","assert","property","version","id","result","from","toBeInstanceOf","value","toEqual","filter","toThrow","make","validate","toBe"],"mappings":"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"}