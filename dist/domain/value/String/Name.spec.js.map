{"version":3,"sources":["../../../../src/domain/value/String/Name.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { MAX_NAME_LENGTH } from './BaseString';\nimport { Name } from './Name';\n\ndescribe('Name', () => {\n  it('should return Name when input is valid', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        (name) => {\n          const value = Name.from(name);\n          expect(value).toBeInstanceOf(Name);\n          expect(value.value).toEqual(name);\n        },\n      ),\n    );\n  });\n  it('should throw an error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (name) => {\n        expect(() => Name.from(name)).toThrow('Name must be not empty');\n      }),\n    );\n  });\n  it('should throw an error when input is too long', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string({ minLength: MAX_NAME_LENGTH + 1 })\n          .map((val) => val.trim())\n          .filter((val) => val.length > MAX_NAME_LENGTH),\n        (name) => {\n          expect(() => Name.from(name)).toThrow(\n            `Name has maximum length of ${MAX_NAME_LENGTH}`,\n          );\n        },\n      ),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two Name has same value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          (name) => {\n            const value1 = Name.from(name);\n            const value2 = Name.from(name);\n            expect(value1).toBeInstanceOf(Name);\n            expect(value2).toBeInstanceOf(Name);\n            expect(value1.value).toEqual(name);\n            expect(value2.value).toEqual(name);\n            expect(value1.equals(value2)).toBe(true);\n          },\n        ),\n      );\n    });\n    it('should return true when compare two Name has difference value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              name1: fc\n                .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n              name2: fc\n                .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n                .map((val) => val.trim())\n                .filter((val) => val.length >= 1),\n            })\n            .filter(({ name1, name2 }) => name1 !== name2),\n          ({ name1, name2 }) => {\n            const value1 = Name.from(name1);\n            const value2 = Name.from(name2);\n            expect(value1).toBeInstanceOf(Name);\n            expect(value2).toBeInstanceOf(Name);\n            expect(value1.value).toEqual(name1);\n            expect(value2.value).toEqual(name2);\n            expect(value1.equals(value2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","MAX_NAME_LENGTH","Name","assert","property","string","minLength","maxLength","map","val","trim","filter","length","name","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","value1","value2","equals","toBe","record","name1","name2"],"mappings":"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"}