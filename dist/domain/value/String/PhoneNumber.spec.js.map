{"version":3,"sources":["../../../../src/domain/value/String/PhoneNumber.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { MAX_PHONE_NUMBER_LENGTH } from './BaseString';\nimport { PhoneNumber } from './PhoneNumber';\n\ndescribe('PhoneNumber', () => {\n  it('should return PhoneNumber when input is valid', () => {\n    fc.assert(\n      fc.property(fc.stringMatching(/^[0-9]{1,21}$/), (phoneNumber) => {\n        const value = PhoneNumber.from(phoneNumber);\n        expect(value).toBeInstanceOf(PhoneNumber);\n        expect(value.value).toEqual(phoneNumber);\n      }),\n    );\n  });\n  it('should return error when input is empty', () => {\n    fc.assert(\n      fc.property(fc.constantFrom('', ' ', '  '), (phoneNumber) => {\n        expect(() => PhoneNumber.from(phoneNumber)).toThrow(\n          'PhoneNumber must be not empty',\n        );\n      }),\n    );\n  });\n  it('should return error when input is too long', () => {\n    fc.assert(\n      fc.property(fc.stringMatching(/^[0-9]{22,}$/), (phoneNumber) => {\n        expect(() => PhoneNumber.from(phoneNumber)).toThrow(\n          `PhoneNumber has maximum length of ${MAX_PHONE_NUMBER_LENGTH}`,\n        );\n      }),\n    );\n  });\n  describe('equals', () => {\n    it('should return true when compare two PhoneNumber has the same value', () => {\n      fc.assert(\n        fc.property(fc.stringMatching(/^[0-9]{1,21}$/), (phoneNumber) => {\n          const phone1 = PhoneNumber.from(phoneNumber);\n          const phone2 = PhoneNumber.from(phoneNumber);\n          expect(phone1).toBeInstanceOf(PhoneNumber);\n          expect(phone2).toBeInstanceOf(PhoneNumber);\n          expect(phone1.value).toEqual(phoneNumber);\n          expect(phone2.value).toEqual(phoneNumber);\n          expect(phone1.equals(phone2)).toBe(true);\n        }),\n      );\n    });\n    it('should return true when compare two PhoneNumber has difference from value', () => {\n      fc.assert(\n        fc.property(\n          fc\n            .record({\n              value1: fc.stringMatching(/^[0-9]{1,21}$/),\n              value2: fc.stringMatching(/^[0-9]{1,21}$/),\n            })\n            .filter(({ value1, value2 }) => value1 !== value2),\n          ({ value1, value2 }) => {\n            const phone1 = PhoneNumber.from(value1);\n            const phone2 = PhoneNumber.from(value2);\n\n            expect(phone1).toBeInstanceOf(PhoneNumber);\n            expect(phone2).toBeInstanceOf(PhoneNumber);\n            expect(phone1.value).toEqual(value1);\n            expect(phone2.value).toEqual(value2);\n            expect(phone1.equals(phone2)).toBe(false);\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["fc","describe","expect","it","MAX_PHONE_NUMBER_LENGTH","PhoneNumber","assert","property","stringMatching","phoneNumber","value","from","toBeInstanceOf","toEqual","constantFrom","toThrow","phone1","phone2","equals","toBe","record","value1","value2","filter"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAASC,uBAAuB,QAAQ,kBAAe;AACvD,SAASC,WAAW,QAAQ,mBAAgB;AAE5CJ,SAAS,eAAe;IACtBE,GAAG,iDAAiD;QAClDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,cAAc,CAAC,kBAAkB,CAACC;YAC/C,MAAMC,QAAQL,YAAYM,IAAI,CAACF;YAC/BP,OAAOQ,OAAOE,cAAc,CAACP;YAC7BH,OAAOQ,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAEJ;IACAN,GAAG,2CAA2C;QAC5CH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGc,YAAY,CAAC,IAAI,KAAK,OAAO,CAACL;YAC3CP,OAAO,IAAMG,YAAYM,IAAI,CAACF,cAAcM,OAAO,CACjD;QAEJ;IAEJ;IACAZ,GAAG,8CAA8C;QAC/CH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,cAAc,CAAC,iBAAiB,CAACC;YAC9CP,OAAO,IAAMG,YAAYM,IAAI,CAACF,cAAcM,OAAO,CACjD,CAAC,kCAAkC,EAAEX,yBAAyB;QAElE;IAEJ;IACAH,SAAS,UAAU;QACjBE,GAAG,sEAAsE;YACvEH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,cAAc,CAAC,kBAAkB,CAACC;gBAC/C,MAAMO,SAASX,YAAYM,IAAI,CAACF;gBAChC,MAAMQ,SAASZ,YAAYM,IAAI,CAACF;gBAChCP,OAAOc,QAAQJ,cAAc,CAACP;gBAC9BH,OAAOe,QAAQL,cAAc,CAACP;gBAC9BH,OAAOc,OAAON,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOe,OAAOP,KAAK,EAAEG,OAAO,CAACJ;gBAC7BP,OAAOc,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAEJ;QACAhB,GAAG,6EAA6E;YAC9EH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGoB,MAAM,CAAC;gBACNC,QAAQrB,GAAGQ,cAAc,CAAC;gBAC1Bc,QAAQtB,GAAGQ,cAAc,CAAC;YAC5B,GACCe,MAAM,CAAC,CAAC,EAAEF,MAAM,EAAEC,MAAM,EAAE,GAAKD,WAAWC,SAC7C,CAAC,EAAED,MAAM,EAAEC,MAAM,EAAE;gBACjB,MAAMN,SAASX,YAAYM,IAAI,CAACU;gBAChC,MAAMJ,SAASZ,YAAYM,IAAI,CAACW;gBAEhCpB,OAAOc,QAAQJ,cAAc,CAACP;gBAC9BH,OAAOe,QAAQL,cAAc,CAACP;gBAC9BH,OAAOc,OAAON,KAAK,EAAEG,OAAO,CAACQ;gBAC7BnB,OAAOe,OAAOP,KAAK,EAAEG,OAAO,CAACS;gBAC7BpB,OAAOc,OAAOE,MAAM,CAACD,SAASE,IAAI,CAAC;YACrC;QAGN;IACF;AACF"}