{"version":3,"sources":["../../../../src/domain/value/String/UserType.spec.ts"],"sourcesContent":["import fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport { USER_TYPE, USER_TYPE_LIST, UserType } from '.';\n\ndescribe('UserType', () => {\n  it('should return UserType when input is valid', () => {\n    fc.assert(\n      fc.property(fc.constantFrom(...USER_TYPE_LIST), (type) => {\n        const value = UserType.from(type);\n\n        expect(value).toBeInstanceOf(UserType);\n        expect(value.value).toEqual(type);\n      }),\n    );\n  });\n  it('should throw an error when input not in enum', () => {\n    fc.assert(\n      fc.property(\n        fc\n          .string()\n          .filter((type) => !USER_TYPE_LIST.includes(type as USER_TYPE)),\n        (type) => {\n          expect(() => UserType.from(type)).toThrow(/Invalid user type/);\n        },\n      ),\n    );\n  });\n});\n"],"names":["fc","describe","expect","it","USER_TYPE_LIST","UserType","assert","property","constantFrom","type","value","from","toBeInstanceOf","toEqual","string","filter","includes","toThrow"],"mappings":"AAAA,OAAOA,QAAQ,aAAa;AAC5B,SAASC,QAAQ,EAAEC,MAAM,EAAEC,EAAE,QAAQ,SAAS;AAE9C,SAAoBC,cAAc,EAAEC,QAAQ,QAAQ,aAAI;AAExDJ,SAAS,YAAY;IACnBE,GAAG,8CAA8C;QAC/CH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CAACP,GAAGQ,YAAY,IAAIJ,iBAAiB,CAACK;YAC/C,MAAMC,QAAQL,SAASM,IAAI,CAACF;YAE5BP,OAAOQ,OAAOE,cAAc,CAACP;YAC7BH,OAAOQ,MAAMA,KAAK,EAAEG,OAAO,CAACJ;QAC9B;IAEJ;IACAN,GAAG,gDAAgD;QACjDH,GAAGM,MAAM,CACPN,GAAGO,QAAQ,CACTP,GACGc,MAAM,GACNC,MAAM,CAAC,CAACN,OAAS,CAACL,eAAeY,QAAQ,CAACP,QAC7C,CAACA;YACCP,OAAO,IAAMG,SAASM,IAAI,CAACF,OAAOQ,OAAO,CAAC;QAC5C;IAGN;AACF"}