{"version":3,"sources":["../../../src/domain/entity/Personnel.spec.ts"],"sourcesContent":["import { format } from 'date-fns';\nimport fc from 'fast-check';\nimport { describe, expect, it } from 'vitest';\n\nimport {\n  AUTHENTICATION_PROVIDER_LIST,\n  AuthenticationProvider,\n  Email,\n  ImagePath,\n  Name,\n  PersonnelId,\n  PhoneNumber,\n  USER_TYPE_LIST,\n  UserType,\n  YEAR_MONTH_DAY_FORMAT,\n  YearMonthDay,\n} from '../value';\nimport {\n  MAX_NAME_LENGTH,\n  MAX_PHONE_NUMBER_LENGTH,\n} from '../value/String/BaseString';\n\nimport { AuthenticationInformation } from './AuthenticationInformation';\nimport { IPersonnel, IUpdatePersonnel, Personnel } from './Personnel';\n\nfunction makeCreateProperty() {\n  return fc\n    .record({\n      id: fc.uuid({ version: 7 }),\n      name: fc\n        .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      phoneNumber: fc\n        .string({ minLength: 1, maxLength: MAX_PHONE_NUMBER_LENGTH })\n        .map((val) => val.trim())\n        .filter((val) => val.length >= 1),\n      email: fc.emailAddress(),\n      dateOfBirth: fc\n        .date({ min: new Date(0), max: new Date(9999, 11, 31) })\n        .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n      image: fc.webUrl(),\n      userType: fc.constantFrom(...USER_TYPE_LIST),\n      authenticationInformation: fc.array(\n        fc.record({\n          uid: fc\n            .string({ minLength: 1, maxLength: 256 })\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n          provider: fc\n            .constantFrom(...AUTHENTICATION_PROVIDER_LIST)\n            .map((val) => val.trim())\n            .filter((val) => val.length >= 1),\n        }),\n        { minLength: 1 },\n      ),\n    })\n    .map<IPersonnel>(\n      ({\n        id,\n        name,\n        phoneNumber,\n        email,\n        dateOfBirth,\n        image,\n        userType,\n        authenticationInformation,\n      }) => ({\n        id: PersonnelId.from(id),\n        name: Name.from(name),\n        phoneNumber: PhoneNumber.from(phoneNumber),\n        email: Email.from(email),\n        dateOfBirth: YearMonthDay.from(dateOfBirth),\n        image: ImagePath.from(image),\n        userType: UserType.from(userType),\n        authenticationInformation: authenticationInformation.map(\n          ({ uid, provider }) =>\n            new AuthenticationInformation({\n              uid,\n              provider: AuthenticationProvider.from(provider),\n            }),\n        ),\n      }),\n    );\n}\nfunction makeUpdateProperty() {\n  return fc\n    .record({\n      name: fc.option(\n        fc\n          .string({ minLength: 1, maxLength: MAX_NAME_LENGTH })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      phoneNumber: fc.option(\n        fc\n          .string({ minLength: 1, maxLength: MAX_PHONE_NUMBER_LENGTH })\n          .map((val) => val.trim())\n          .filter((val) => val.length >= 1),\n        { nil: undefined },\n      ),\n      email: fc.option(fc.emailAddress(), { nil: undefined }),\n      dateOfBirth: fc.option(\n        fc\n          .date({ min: new Date(0), max: new Date(9999, 11, 31) })\n          .map((val) => format(val, YEAR_MONTH_DAY_FORMAT)),\n        { nil: undefined },\n      ),\n      image: fc.option(fc.webUrl(), { nil: undefined }),\n      userType: fc.option(fc.constantFrom(...USER_TYPE_LIST), {\n        nil: undefined,\n      }),\n      authenticationInformation: fc.option(\n        fc.array(\n          fc.record({\n            uid: fc\n              .string({ minLength: 1, maxLength: 256 })\n              .map((val) => val.trim())\n              .filter((val) => val.length >= 1),\n            provider: fc\n              .constantFrom(...AUTHENTICATION_PROVIDER_LIST)\n              .map((val) => val.trim())\n              .filter((val) => val.length >= 1),\n          }),\n          { minLength: 1 },\n        ),\n        { nil: undefined },\n      ),\n    })\n    .map<IUpdatePersonnel>(\n      ({\n        name,\n        phoneNumber,\n        email,\n        dateOfBirth,\n        image,\n        userType,\n        authenticationInformation,\n      }) => ({\n        name: name ? Name.from(name) : undefined,\n        phoneNumber: phoneNumber ? PhoneNumber.from(phoneNumber) : undefined,\n        email: email ? Email.from(email) : undefined,\n        dateOfBirth: dateOfBirth ? YearMonthDay.from(dateOfBirth) : undefined,\n        image: image ? ImagePath.from(image) : undefined,\n        userType: userType ? UserType.from(userType) : undefined,\n        authenticationInformation: authenticationInformation?.map(\n          ({ uid, provider }) =>\n            new AuthenticationInformation({\n              uid,\n              provider: AuthenticationProvider.from(provider),\n            }),\n        ),\n      }),\n    );\n}\n\ndescribe('Personnel', () => {\n  it('should return Personnel when input is valid', () => {\n    fc.assert(\n      fc.property(makeCreateProperty(), (args) => {\n        const value = new Personnel(args);\n\n        expect(value).toBeInstanceOf(Personnel);\n        expect(value.id.value).toEqual(args.id.value);\n        expect(value.name.value).toEqual(args.name.value);\n        expect(value.phoneNumber.value).toEqual(args.phoneNumber.value);\n        expect(value.email.value).toEqual(args.email.value);\n        expect(value.dateOfBirth.toString()).toEqual(\n          args.dateOfBirth.toString(),\n        );\n        expect(value.image.value).toEqual(args.image.value);\n        expect(value.userType.value).toEqual(args.userType.value);\n        expect(value.authenticationInformation).toEqual(\n          expect.arrayContaining(args.authenticationInformation),\n        );\n      }),\n    );\n  });\n  describe('update', () => {\n    it('should return UpdatePersonnel when input is valid', () => {\n      fc.assert(\n        fc.property(\n          makeCreateProperty(),\n          makeUpdateProperty(),\n          (createArgs, updateArgs) => {\n            const entity = new Personnel(createArgs);\n            expect(entity).toBeInstanceOf(Personnel);\n\n            const update = entity.update(updateArgs);\n\n            expect(update.id.value).toEqual(entity.id.value);\n            expect(update.name?.value).toEqual(updateArgs.name?.value);\n            expect(update.phoneNumber?.value).toEqual(\n              updateArgs.phoneNumber?.value,\n            );\n            expect(update.email?.value).toEqual(updateArgs.email?.value);\n            expect(update.dateOfBirth?.toString()).toEqual(\n              updateArgs.dateOfBirth?.toString(),\n            );\n            expect(update.image?.value).toEqual(updateArgs.image?.value);\n            expect(update.userType?.value).toEqual(updateArgs.userType?.value);\n            if (updateArgs.authenticationInformation) {\n              expect(update.authenticationInformation).toEqual(\n                expect.arrayContaining(updateArgs.authenticationInformation),\n              );\n            } else {\n              expect(update.authenticationInformation).toBeUndefined();\n            }\n          },\n        ),\n      );\n    });\n  });\n});\n"],"names":["format","fc","describe","expect","it","AUTHENTICATION_PROVIDER_LIST","AuthenticationProvider","Email","ImagePath","Name","PersonnelId","PhoneNumber","USER_TYPE_LIST","UserType","YEAR_MONTH_DAY_FORMAT","YearMonthDay","MAX_NAME_LENGTH","MAX_PHONE_NUMBER_LENGTH","AuthenticationInformation","Personnel","makeCreateProperty","record","id","uuid","version","name","string","minLength","maxLength","map","val","trim","filter","length","phoneNumber","email","emailAddress","dateOfBirth","date","min","Date","max","image","webUrl","userType","constantFrom","authenticationInformation","array","uid","provider","from","makeUpdateProperty","option","nil","undefined","assert","property","args","value","toBeInstanceOf","toEqual","toString","arrayContaining","createArgs","updateArgs","entity","update","toBeUndefined"],"mappings":"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"}